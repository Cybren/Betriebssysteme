Uebungsblatt 08
Aufgabe 1
a)
	1)
	Der Algo. speichert wie oft insgesamt gegessen wurde. Damit wird errechent ob ein Philosoph an der Reihe ist. Ist er nicht an der Reihe verfällte er in Busy-Waiting bis er dran ist. 
	Wenn der Philosoph an der Reihe ist nimmt er die linke, dann die rechter Gabel, isst, und legt dann die rechte und dann die linke Gabel wieder hin. 
	Nach dem beide Gabeln wieder liegen wird die Anzahl wie oft insgesamt gegessen wurde um Eins erhöht, so dass dann der nächste Philosoph essen kann.
	2)
	Der Algo. ist fair, da er nach dem Round-Robin-Prinzip abläuft und so immer nur ein Philosoph auf einmal isst, was zwar keinen Philosophen verhungern lässt aber trotzdem ineffizient ist.
	Außerdem gerät dieser Algo. nicht in einen Deadlock, vorausgesetzt kein Philosoph stürtzt ab.
	
b)
	1)
	Bei dem Algo. verhalten sich alle Philosoph gleich und nehmen erst die linke und dann die rechte Gabel, außer der Philosoph mit dem Index 3, dieser nimmt erst die rechte dann die linke Gabel. 
	Danach essen alle Philosophen und legen erst die linke und dann die rechte Gabel hin. 
	Diese veränderte Reihenfolge beim Nehmen der Gabeln des dritten Philosoph sorgt dafür, dass es bei einer gleichen Taktung der Philosophen nicht zu einem Deadlock kommt, da der Philosoph mit dem Index 4 in diesem Fall immer auch seine rechte Gabel bekommt und somit essen kann.
	2)
	Bei diesem Algo. verhungert auch kein Philosoph, da es keine Prioritäten gibt und auch kein Deadlock entstehen kann. Aus diesem Grund ist der Algo. fair. 
	Es kann nur durch sehr ungüstige Prozesswechsel passieren, dass ein Philosoph während der gesammten Laufzeit niemals essen kann. In der Regel sollte das aber nicht passieren.
	Außerdem ist er effizienter als der Algo. aus a), da hier mehr als ein Philosoph auf einmal essen kann.

	





